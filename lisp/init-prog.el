(use-package treesit-auto
  :config
  (global-treesit-auto-mode))

;; Slightly shorten eldoc display delay.
(use-package eldoc
  :ensure nil
  :diminish eldoc-mode
  :config
  (setq eldoc-echo-area-use-multiline-p nil)
  (setq eldoc-idle-delay 0.4))

;; Highlight indentions
(use-package highlight-indent-guides
  :diminish
  :hook (prog-mode . highlight-indent-guides-mode)
  :config
  (setq highlight-indent-guides-method 'character)
  )

;; Flycheck
;; A modern on-the-fly syntax checking extension â€“ absolute essential
(use-package flycheck
  :hook (prog-mode . flycheck-mode))

;; Auto format code on save
(use-package apheleia
  :init
  (apheleia-global-mode +1)
  )

;; (unless (display-graphic-p)
;;   (quelpa '(popon :fetcher git :url "https://codeberg.org/akib/emacs-popon.git"))
;;   (quelpa '(acm-terminal :fetcher github :repo "twlz0ne/acm-terminal")))


;; Eglot - Built-in LSP client for Emacs
(use-package eglot
  :ensure nil  ; Built into Emacs 29+
  :commands (eglot eglot-ensure)
  :hook ((prog-mode . eglot-ensure))
  :custom
  (eglot-autoshutdown t)                    ; Shutdown server when last buffer is closed
  (eglot-confirm-server-initiated-edits nil) ; Don't ask for confirmation on edits
  (eglot-extend-to-xref t)                  ; Extend eglot to xref results
  (eglot-ignored-server-capabilities        ; Disable features handled by other packages
   '(:documentHighlightProvider             ; We use treesitter for highlighting
     :foldingRangeProvider                  ; We use origami for folding
     :documentFormattingProvider            ; We use apheleia for formatting
     :documentRangeFormattingProvider
     :documentOnTypeFormattingProvider))
  :config
  ;; Disable eglot's completion in favor of corfu
  (setq completion-category-defaults nil)
  ;; Performance optimizations
  (setq eglot-events-buffer-size 0)         ; Disable event logging for performance
  (setq eglot-sync-connect nil)             ; Don't block on connection
  (setq read-process-output-max (* 1024 1024)) ; Increase read buffer for better performance
  )

;; Eglot Booster - Performance optimization for eglot
(use-package eglot-booster
  :vc (:url "https://github.com/jdtsmith/eglot-booster.git")
  :after eglot
  :config
  (eglot-booster-mode))


;; code folding
(use-package origami
  :hook (prog-mode . origami-mode))

;;
(use-package citre
  :defer t
  :init
  (require 'citre-config)
  ;; in `citre-mode-map' so you can only use them when `citre-mode' is enabled.
  (global-set-key (kbd "C-x c j") 'citre-jump)
  (global-set-key (kbd "C-x c J") 'citre-jump-back)
  (global-set-key (kbd "C-x c p") 'citre-ace-peek)
  (global-set-key (kbd "C-x c u") 'citre-update-this-tags-file)
  :config
  (setq
   ;; Set these if readtags/ctags is not in your PATH.
   ;; citre-readtags-program "/path/to/readtags"
   citre-ctags-program "/opt/homebrew/bin/ctags"
   ;; Set these if gtags/global is not in your PATH (and you want to use the
   ;; global backend)
   ;; citre-gtags-program "/path/to/gtags"
   ;; citre-global-program "/path/to/global"
   ;; Set this if you use project management plugin like projectile.  It's
   ;; used for things like displaying paths relatively, see its docstring.
   citre-project-root-function (lambda ()
                                 (interactive)
                                 (let ((project (project-current (buffer-file-name))))
                                   (expand-file-name (project-root project))))

   ;; Set this if you want to always use one location to create a tags file.
   ;; citre-default-create-tags-file-location 'global-cache
   ;; Set this if you'd like to use ctags options generated by Citre
   ;; directly, rather than further editing them.
   ;; citre-edit-ctags-options-manually nil
   ;; If you only want the auto enabling citre-mode behavior to work for
   ;; certain modes (like `prog-mode'), set it like this.
   ;; citre-auto-enable-citre-mode-modes '(prog-mode)
   ))

(use-package devdocs
  :bind ("C-h D" . devdocs-lookup))


(provide 'init-prog)
